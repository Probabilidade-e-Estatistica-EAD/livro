}
myPDF('usHeightsHist180185.pdf', 6.9, 3.1625,
mar = c(3, 1, 0.1, 1),
mgp = c(1.8, 0.7, 0))
histTemp(BR[[2]],
COUNTS[[2]],
xlim = c(125, 210),
axes = FALSE,
xlab = 'height (cm)',
probability = FALSE)
lines(BR[[i]],
c(COUNTS[[i]], 0),
type = 's',
col = COL[1],
lwd = 2)
axis(1)
rect(BR[[2]][27], 0,
BR[[2]][28], COUNTS[[2]][27],
col = COL[1],
border = COL[1])
rect(BR[[2]][28], 0,
BR[[2]][29], COUNTS[[2]][28],
col = COL[1],
border = COL[1])
dev.off()
dev.off()
library(openintro)
data(COL)
# _____ Load Data Set From fdicHistograms _____ #
load("fdicHistograms.rda")
BR      <- list()
MIDS    <- br[-1] - 0.25
BR[[1]] <- seq(110, 210, 10)
BR[[2]] <- seq(115, 210, 2.5)
COUNTS  <- list()
for (i in 1:2) {
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)
for (j in 1:(length(BR[[i]])-1)) {
these <- apply(cbind(MIDS < BR[[i]][j + 1],
MIDS >= BR[[i]][j]),
1,
all)
if (any(these)) {
COUNTS[[i]][j] <- sum(counts[these])
}
}
}
histTemp <- function(
BR, COUNTS, col = fadeColor(COL[1], "10"),
border = COL[1,4], probability = FALSE,
xlab = '', ylab = NULL,
xlim = NULL, ylim = NULL,
...) {
br <- BR
h  <- COUNTS
if (probability) {
h <- h / sum(h) / diff(br)
}
if (is.null(ylab)) {
ylab <- 'frequency'
if (probability) {
ylab <- 'probability'
}
}
if (is.null(xlim)[1]) {
xR <- range(br)
xlim <- xR + c(-0.05, 0.05) * diff(xR)
}
if (is.null(ylim)[1]) {
ylim <- range(c(0,h))
}
plot(-1, -1,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
...)
abline(h = 0)
lines(c(br[1], br[1]), c(0, h[1]), col = border)
for (i in 1:length(h)) {
if (i > 1) {
if (h[i] > h[i - 1]) {
lines(rep(br[i], 2), h[c(i - 1, i)], col = border)
}
}
lines(br[i + 0:1], rep(h[i], 2), col = border)
lines(rep(br[i + 1], 2), c(0, h[i]), col = border)
rect(br[i], 0, br[i + 1], h[i],
col = col,
border = '#00000000')
}
}
histTemp(BR[[2]],
COUNTS[[2]],
xlim = c(125, 210),
axes = FALSE,
xlab = 'height (cm)',
probability = FALSE)
lines(BR[[i]],
c(COUNTS[[i]], 0),
type = 's',
col = COL[1],
lwd = 2)
axis(1)
rect(BR[[2]][27], 0,
BR[[2]][28], COUNTS[[2]][27],
col = COL[1],
border = COL[1])
rect(BR[[2]][28], 0,
BR[[2]][29], COUNTS[[2]][28],
col = COL[1],
border = COL[1])
dev.off()
library(openintro)
data(COL)
# _____ Load Data Set From fdicHistograms _____ #
load("fdicHistograms.rda")
BR      <- list()
MIDS    <- br[-1] - 0.25
BR[[1]] <- seq(110, 210, 10)
BR[[2]] <- seq(115, 210, 2.5)
COUNTS  <- list()
for (i in 1:2) {
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)
for (j in 1:(length(BR[[i]])-1)) {
these <- apply(cbind(MIDS < BR[[i]][j + 1],
MIDS >= BR[[i]][j]),
1,
all)
if (any(these)) {
COUNTS[[i]][j] <- sum(counts[these])
}
}
}
histTemp <- function(
BR, COUNTS, col = fadeColor(COL[1], "10"),
border = COL[1,4], probability = FALSE,
xlab = '', ylab = NULL,
xlim = NULL, ylim = NULL,
...) {
br <- BR
h  <- COUNTS
if (probability) {
h <- h / sum(h) / diff(br)
}
if (is.null(ylab)) {
ylab <- 'frequency'
if (probability) {
ylab <- 'probability'
}
}
if (is.null(xlim)[1]) {
xR <- range(br)
xlim <- xR + c(-0.05, 0.05) * diff(xR)
}
if (is.null(ylim)[1]) {
ylim <- range(c(0,h))
}
plot(-1, -1,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
...)
abline(h = 0)
lines(c(br[1], br[1]), c(0, h[1]), col = border)
for (i in 1:length(h)) {
if (i > 1) {
if (h[i] > h[i - 1]) {
lines(rep(br[i], 2), h[c(i - 1, i)], col = border)
}
}
lines(br[i + 0:1], rep(h[i], 2), col = border)
lines(rep(br[i + 1], 2), c(0, h[i]), col = border)
rect(br[i], 0, br[i + 1], h[i],
col = col,
border = '#00000000')
}
}
histTemp(BR[[2]],
COUNTS[[2]],
xlim = c(125, 210),
axes = FALSE,
xlab = 'height (cm)',
probability = FALSE)
lines(BR[[i]],
c(COUNTS[[i]], 0),
type = 's',
col = COL[1],
lwd = 2)
axis(1)
rect(BR[[2]][27], 0,
BR[[2]][28], COUNTS[[2]][27],
col = COL[1],
border = COL[1])
rect(BR[[2]][28], 0,
BR[[2]][29], COUNTS[[2]][28],
col = COL[1],
border = COL[1])
library(openintro)
data(COL)
load("fdicHistograms.rda")
MIDS <- br[-1] - diff(br[1:2]) / 2
BR <- list()
BR[[1]] <- seq(110, 210, 10)
BR[[2]] <- seq(115, 210, 5)
BR[[3]] <- seq(110, 210, 2)
BR[[4]] <- seq(110, 210, 1)
COUNTS <- list()
for (i in 1:4) {
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)
for (j in 1:(length(BR[[i]])-1)) {
these <- apply(cbind(MIDS < BR[[i]][j+1],
MIDS >= BR[[i]][j]),
1,
all)
if (any(these)) {
COUNTS[[i]][j] <- sum(counts[these])
}
}
}
histTemp <- function(
BR, COUNTS, col = fadeColor(COL[1], "10"),
border = COL[1,4], probability = FALSE,
xlab = '', ylab = NULL,
xlim = NULL, ylim = NULL,
...) {
br <- BR
h  <- COUNTS
if (probability) {
h <- h / sum(h) / diff(br)
}
if (is.null(ylab)) {
ylab <- 'frequency'
if (probability) {
ylab <- 'probability'
}
}
if (is.null(xlim)[1]) {
xR <- range(br)
xlim <- xR + c(-0.05, 0.05) * diff(xR)
}
if (is.null(ylim)[1]) {
ylim <- range(c(0, h))
}
plot(-1, -1,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
...)
abline(h = 0)
lines(c(br[1], br[1]), c(0, h[1]), col = border)
for (i in 1:length(h)) {
if (i > 1) {
if (h[i] > h[i-1]) {
lines(rep(br[i], 2), h[c(i - 1, i)], col = border)
}
}
lines(br[i + 0:1], rep(h[i], 2), col = border)
lines(rep(br[i + 1], 2), c(0, h[i]), col = border)
rect(br[i], 0,
br[i + 1], h[i],
col = col,
border = '#00000000')
}
}
for (i in 1:4) {
histTemp(BR[[i]],
COUNTS[[i]],
xlim = c(125, 210),
axes = FALSE,
xlab = 'height (cm)')
lines(BR[[i]],
c(COUNTS[[i]], 0),
type = 's',
col = COL[1],
lwd = 2)
axis(1, cex.axis = 0.9)
}
library(openintro)
data(COL)
load("fdicHistograms.rda")
par(mfrow = c(2,2))
MIDS <- br[-1] - diff(br[1:2]) / 2
BR <- list()
BR[[1]] <- seq(110, 210, 10)
BR[[2]] <- seq(115, 210, 5)
BR[[3]] <- seq(110, 210, 2)
BR[[4]] <- seq(110, 210, 1)
COUNTS <- list()
for (i in 1:4) {
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)
for (j in 1:(length(BR[[i]])-1)) {
these <- apply(cbind(MIDS < BR[[i]][j+1],
MIDS >= BR[[i]][j]),
1,
all)
if (any(these)) {
COUNTS[[i]][j] <- sum(counts[these])
}
}
}
histTemp <- function(
BR, COUNTS, col = fadeColor(COL[1], "10"),
border = COL[1,4], probability = FALSE,
xlab = '', ylab = NULL,
xlim = NULL, ylim = NULL,
...) {
br <- BR
h  <- COUNTS
if (probability) {
h <- h / sum(h) / diff(br)
}
if (is.null(ylab)) {
ylab <- 'frequency'
if (probability) {
ylab <- 'probability'
}
}
if (is.null(xlim)[1]) {
xR <- range(br)
xlim <- xR + c(-0.05, 0.05) * diff(xR)
}
if (is.null(ylim)[1]) {
ylim <- range(c(0, h))
}
plot(-1, -1,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
...)
abline(h = 0)
lines(c(br[1], br[1]), c(0, h[1]), col = border)
for (i in 1:length(h)) {
if (i > 1) {
if (h[i] > h[i-1]) {
lines(rep(br[i], 2), h[c(i - 1, i)], col = border)
}
}
lines(br[i + 0:1], rep(h[i], 2), col = border)
lines(rep(br[i + 1], 2), c(0, h[i]), col = border)
rect(br[i], 0,
br[i + 1], h[i],
col = col,
border = '#00000000')
}
}
for (i in 1:4) {
histTemp(BR[[i]],
COUNTS[[i]],
xlim = c(125, 210),
axes = FALSE,
xlab = 'height (cm)')
lines(BR[[i]],
c(COUNTS[[i]], 0),
type = 's',
col = COL[1],
lwd = 2)
axis(1, cex.axis = 0.9)
}
library(openintro)
data(COL)
library(stockPortfolio)
t <- c("GOOGL", "XOM")
g <- getReturns(t, start = "2008-12-01", end = "2012-01-08")
s <- stockModel(g)
sum(s$R*c(6000, 2000))
sum(c(6000, 2000)^2 * s$sigma^2)
ret <- apply(t(g$R[1:36, ]) * c(6000, 2000), 2, sum)
boxPlot(ret,
main = "",
xlab = "Monthly returns (2009-2011)",
ylab = "",
horiz = TRUE,
axes = FALSE,
ylim = c(0.6, 1.4))
points(ret,
rep(0.9, 36),
col = COL[1, 3],
pch = 19)
buildAxis(1, ret, 2, 4)
library(openintro)
data(COL)
library(stockPortfolio)
t <- c("GOOGL", "XOM")
g <- getReturns(t, start = "2008-12-01", end = "2012-01-08")
s <- stockModel(g)
t
t
getReturns
getReturns(t)
remotes::install_version("stockPortfolio", version = "1.2")
data(COL)
library(stockPortfolio)
t <- c("GOOGL", "XOM")
g <- getReturns(t, start = "2008-12-01", end = "2012-01-08")
tab11 <- rbind(c(0.0210, 0.0846,	0.0072), c(0.0038, 0.0519, 0.0027))
colnames(tab11) <- c('Média', 'Desvio Padrão', 'Variância')
rownames(tab11) <- c('GOOG', 'XOM')
tab11
library(openintro)
data(COL)
# _____ Load Data Set From fdicHistograms _____ #
load("fdicHistograms.rda")
BR <- list()
MIDS <- br[-1] - 0.25
BR[[1]] <- seq(110, 210, 10)
BR[[2]] <- seq(115, 210, 2.5)
COUNTS <- list()
for (i in 1:2) {
COUNTS[[i]] <- rep(0, length(BR[[i]]) - 1)
for (j in 1:(length(BR[[i]]) - 1)) {
these <- apply(cbind(MIDS < BR[[i]][j + 1],
MIDS >= BR[[i]][j]),
1,
all)
if (any(these)) {
COUNTS[[i]][j] <- sum(counts[these])
}
}
}
BR <- list()
MIDS <- br[-1] - 0.25
BR[[1]] <- seq(110, 210, 10)
BR[[2]] <- seq(115, 210, 2.5)
COUNTS <- list()
for (i in 1:2) {
COUNTS[[i]] <- rep(0, length(BR[[i]]) - 1)
for (j in 1:(length(BR[[i]]) - 1)) {
these <- apply(cbind(MIDS < BR[[i]][j + 1],
MIDS >= BR[[i]][j]),
1,
all)
if (any(these)) {
COUNTS[[i]][j] <- sum(counts[these])
}
}
}
histTemp <- function(
BR, COUNTS, col = fadeColor(COL[1], "10"),
border = COL[1, 4], probability = TRUE,
xlab = '', ylab = NULL,
xlim = NULL, ylim = NULL,
...) {
br <- BR
h  <- COUNTS
if (probability) {
h <- h/sum(h)/diff(br)
}
if (is.null(ylab)) {
ylab <- 'frequency'
if (probability) {
ylab <- 'probability'
}
}
if (is.null(xlim)[1]) {
xR <- range(br)
xlim <- xR + c(-0.05, 0.05)*diff(xR)
}
if (is.null(ylim)[1]) {
ylim <- range(c(0,h))
}
plot(-1, -1,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
...)
abline(h = 0)
lines(c(br[1],br[1]), c(0,h[1]), col = border)
for (i in 1:length(h)) {
if (i > 1) {
if (h[i] > h[i-1]) {
lines(rep(br[i],2), h[c(i-1,i)], col = border)
}
}
lines(br[i + 0:1],
rep(h[i], 2),
col = border)
lines(rep(br[i + 1], 2),
c(0, h[i]),
col = border)
rect(br[i], 0,
br[i + 1], h[i],
col = col,
border = border)
}
}
histTemp(BR[[2]],
COUNTS[[2]],
col = fadeColor(COL[1], "10"),
border = COL[1,4],
xlim = c(125, 210),
axes = FALSE,
xlab = 'height (cm)',
ylab = '',
probability = TRUE)
axis(1)
lines(dens$x, dens$y, col = COL[1], lwd = 2)
these <- dens$x > 180 & dens$x < 185
polygon(c(dens$x[these][1], dens$x[these], rev(dens$x[these])[1]),
c(0, dens$y[these], 0),
col = COL[1],
border = COL[1])
sum(dens$y[these] * diff(dens$x[1:2]))
